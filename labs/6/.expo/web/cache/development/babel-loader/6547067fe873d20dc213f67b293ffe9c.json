{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Shammymeatsix\\\\Documents\\\\GitHub\\\\dig4639-mobile-dev\\\\labs\\\\6\\\\components\\\\questions\\\\index.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\n\nvar FlatListQuestions = function (_Component) {\n  _inherits(FlatListQuestions, _Component);\n\n  var _super = _createSuper(FlatListQuestions);\n\n  function FlatListQuestions() {\n    var _this;\n\n    _classCallCheck(this, FlatListQuestions);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      userPoints: 0\n    };\n    _this.questions = [[{\n      text: \"q1\"\n    }, {\n      text: \"q2\",\n      correct: true\n    }, {\n      text: \"q3\"\n    }], [{\n      text: \"q1\",\n      correct: true\n    }, {\n      text: \"q2\"\n    }, {\n      text: \"q3\"\n    }], [{\n      text: \"q1\"\n    }, {\n      text: \"q2\",\n      correct: true\n    }, {\n      text: \"q3\"\n    }]];\n    return _this;\n  }\n\n  _createClass(FlatListQuestions, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 13\n        }\n      }, this.questions[0].map(function (q) {\n        return React.createElement(Button, {\n          title: q.text,\n          onPress: q.correct && _this2.setState({\n            userPoints: userPoints + 1\n          }),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 17,\n            columnNumber: 21\n          }\n        });\n      }));\n    }\n  }]);\n\n  return FlatListQuestions;\n}(Component);\n\nvar styles = StyleSheet.create({\n  container: {\n    padding: 5,\n    margin: 10,\n    border: 10.5,\n    borderStyle: 'hidden',\n    backgroundColor: 'rgb(106, 90, 205)'\n  },\n  item: {\n    padding: 5,\n    fontStyle: 'monospace',\n    fontFamily: 'Courier',\n    color: 'rgb(255,255,240)'\n  }\n});\nexport default FlatListQuestions;","map":{"version":3,"sources":["C:/Users/Shammymeatsix/Documents/GitHub/dig4639-mobile-dev/labs/6/components/questions/index.js"],"names":["React","Component","FlatListQuestions","state","userPoints","questions","text","correct","styles","container","map","q","setState","StyleSheet","create","padding","margin","border","borderStyle","backgroundColor","item","fontStyle","fontFamily","color"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;;;;IAGMC,iB;;;;;;;;;;;;;;;UACFC,K,GAAQ;AAACC,MAAAA,UAAU,EAAC;AAAZ,K;UAERC,S,GAAU,CACN,CAAC;AAACC,MAAAA,IAAI,EAAC;AAAN,KAAD,EAAc;AAACA,MAAAA,IAAI,EAAC,IAAN;AAAYC,MAAAA,OAAO,EAAC;AAApB,KAAd,EAAyC;AAACD,MAAAA,IAAI,EAAC;AAAN,KAAzC,CADM,EAEN,CAAC;AAACA,MAAAA,IAAI,EAAC,IAAN;AAAWC,MAAAA,OAAO,EAAC;AAAnB,KAAD,EAA2B;AAACD,MAAAA,IAAI,EAAC;AAAN,KAA3B,EAAwC;AAACA,MAAAA,IAAI,EAAC;AAAN,KAAxC,CAFM,EAGN,CAAC;AAACA,MAAAA,IAAI,EAAC;AAAN,KAAD,EAAc;AAACA,MAAAA,IAAI,EAAC,IAAN;AAAYC,MAAAA,OAAO,EAAC;AAApB,KAAd,EAAyC;AAACD,MAAAA,IAAI,EAAC;AAAN,KAAzC,CAHM,C;;;;;;6BAKF;AAAA;;AACJ,aACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEE,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEK,KAAKJ,SAAL,CAAe,CAAf,EAAkBK,GAAlB,CAAsB,UAACC,CAAD;AAAA,eACnB,oBAAC,MAAD;AAAQ,UAAA,KAAK,EAAEA,CAAC,CAACL,IAAjB;AACA,UAAA,OAAO,EAAKK,CAAC,CAACJ,OAAF,IAAa,MAAI,CAACK,QAAL,CAAc;AAACR,YAAAA,UAAU,EAACA,UAAU,GAAC;AAAvB,WAAd,CADzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADmB;AAAA,OAAtB,CAFL,CADJ;AAuGH;;;;EAhH2BH,S;;AAmHhC,IAAMO,MAAM,GAAGK,UAAU,CAACC,MAAX,CAAkB;AAC7BL,EAAAA,SAAS,EAAC;AACNM,IAAAA,OAAO,EAAE,CADH;AAENC,IAAAA,MAAM,EAAE,EAFF;AAGNC,IAAAA,MAAM,EAAE,IAHF;AAINC,IAAAA,WAAW,EAAE,QAJP;AAKNC,IAAAA,eAAe,EAAE;AALX,GADmB;AAU7BC,EAAAA,IAAI,EAAC;AACDL,IAAAA,OAAO,EAAE,CADR;AAEDM,IAAAA,SAAS,EAAE,WAFV;AAGDC,IAAAA,UAAU,EAAE,SAHX;AAIDC,IAAAA,KAAK,EAAE;AAJN;AAVwB,CAAlB,CAAf;AAmBA,eAAerB,iBAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Button, FlatList, StyleSheet, Text, View } from 'react-native';\r\n\r\nclass FlatListQuestions extends Component{\r\n    state = {userPoints:0};\r\n    //defining questions as a data structure\r\n    questions=[\r\n        [{text:\"q1\"}, {text:\"q2\", correct:true}, {text:\"q3\"}],\r\n        [{text:\"q1\",correct:true}, {text:\"q2\"}, {text:\"q3\"}],\r\n        [{text:\"q1\"}, {text:\"q2\", correct:true}, {text:\"q3\"}],\r\n    ]\r\n    render(){\r\n        return(\r\n            <View style={styles.container}>\r\n                {/* mapping questions to create their respective buttons */}\r\n                {this.questions[0].map((q)=>\r\n                    <Button title={q.text}\r\n                    onPress = {(q.correct && this.setState({userPoints:userPoints+1}))} />\r\n                )}\r\n            </View>);\r\n            /*\r\n                data={[\r\n                    {key: \"Are you enjoying yourself yet??\"}, \r\n                    <Button\r\n                        onPress = {this.userPoints +1}\r\n                        title = \"Yes\"\r\n                        />,\r\n                    <Button\r\n                        onPress = {this.userPoints -1}\r\n                        title = \"No\"\r\n                        />,\r\n                    {key: \"Can you touch your tongue on your elbow?\"},\r\n                    <Button\r\n                        onPress = {this.userPoints +1}\r\n                        title = \"Yes\"\r\n                        />,\r\n                    <Button\r\n                        onPress = {this.userPoints -1}\r\n                        title = \"No\"\r\n                        />,\r\n                    {key: \"What is your favorite type of Fruit?\"},\r\n                    <Button \r\n                        onPress ={this.userPoints +1}\r\n                        title =\"Pear\"\r\n                    />,\r\n                    <Button\r\n                        onPress = {this.userPoints +2}\r\n                        title = \"Orange\">\r\n                    </Button>,\r\n\r\n                    <Button\r\n                        onPress = {this.userPoints +3}\r\n                        title= \"Cherry\">\r\n\r\n                    </Button>,\r\n                    <Button\r\n                        onPress={this.userPoints+4}\r\n                        title=\"Apple\"></Button>,\r\n                    <Button\r\n                    onPress={this.userPoints+5}\r\n                    title=\"Peach\"></Button>,\r\n\r\n                    {key: \"Are you a early bird or a night owl?\"},\r\n                    <Button \r\n                    onPress={this.userPoints+1}\r\n                    title=\"Early Bird\"/>,\r\n                    <Button\r\n                    onPress= {this.userPoints+1}\r\n                    title=\"Night owl\"></Button>,\r\n\r\n                    {key: \"Did you have water today?\"},\r\n                    <Button\r\n                        onPress = {this.userPoint +1}\r\n                        title = \"Yes\"\r\n                        />,\r\n                    <Button\r\n                        onPress = {this.userPoint -1}\r\n                        title = \"No\"\r\n                        />,\r\n\r\n                    {key: \"Have you had a meal today?\"},\r\n                    <Button\r\n                        onPress = {this.userPoint +1}\r\n                        title = \"Yes\"\r\n                        />,\r\n                    <Button\r\n                        onPress = {this.userPoint -1}\r\n                        title = \"No\"\r\n                        />,\r\n                    {key: \"How long can you hold your breath?\"},\r\n\r\n                        <Button \r\n                        onPress={this.this.userPoint +5}\r\n                        title=\">3 minutes\"/>,\r\n                        <Button \r\n                        onPress={this.this.userPoint +8}\r\n                        title=\"<5 minutes\"/>,\r\n                        <Button \r\n                        onPress={this.this.userPoint +0}\r\n                        title=\"<8 minutes\"/>,\r\n                        <Button \r\n                        onPress={this.this.userPoint +2}\r\n                        title=\">10 seconds\"/>,\r\n                        \r\n                    {key: \"Do you play video games?\"},\r\n                    {key: \"Do you know why Rachel took her off the mf schedule?\"},\r\n                    {key: \"Have you tried that whipped coffee?\"},\r\n                    \r\n\r\n                ]}\r\n                renderItem={\r\n                    ({item,index})=> <Text style={styles.item}>{index+1}.{item.key}</Text>\r\n                }\r\n            </View>\r\n        );*/\r\n    }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container:{\r\n        padding: 5 ,\r\n        margin: 10,\r\n        border: 10.5 ,\r\n        borderStyle: 'hidden',\r\n        backgroundColor: 'rgb(106, 90, 205)',\r\n\r\n    },\r\n\r\n    item:{\r\n        padding: 5,\r\n        fontStyle: 'monospace',\r\n        fontFamily: 'Courier',\r\n        color: 'rgb(255,255,240)',\r\n\r\n    }\r\n})\r\n\r\nexport default FlatListQuestions;"]},"metadata":{},"sourceType":"module"}